---
layout: post
title: "面试准备"
author: "Bart Simpson"
meta: "Springfield"
---

##### 高并发

###### 问题

 1. 什么是原子操作

     - 原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步

 2. 什么是Executors框架？

 3. 什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？

     - java.util.concurrent.BlockingQueue的特性是：当队列是空的时，从队列中获取或删除元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。阻塞队列不接受空值，当你尝试向队列中添加空值的时候，它会抛出NullPointerException。阻塞队列的实现都是线程安全的，所有的查询方法都是原子的并且使用了内部锁或者其他形式的并发控制。BlockingQueue 接口是java collections框架的一部分，它主要用于实现生产者-消费者问题。

###### **高并发优化**

 1. 从最基础的地方做起，优化我们写的代码，减少必要的资源浪费

     - 避免频繁的使用new对象，对于整个应用只需要存在一个实例的类，我们可以使用单例模式。对于String连接操作，使用`StringBuffer`或`StringBuilder，对于工具类可以通过静态方法来访问

     - 避免使用错误的方式，尽量不用instanceof做条件判断。使用java中效率高的类，比如ArrayList比Vector性能

 2. html静态化

     -  我们通过一个链接地址访问，通过这个链接地址，服务器对应的模块处理这个请求，转到对应的jsp页面，最后生成我们要的数据。但是，如果上千万个请求的话，有太多的高并发请求，那么就会加重服务器的压力，最坏的情况是把服务器down掉。那么如何避免这种情况的出现呢？如果我们把最初对test.do的请求结果保存成一个html文件，然后每次用户都去访问这个html文件，这样就不用再去访问服务器了，服务器的压力不就减少了？ 当用户去访问，会自动的生成test.html ，然后再显示给用户

 3. 图片服务器分离

     - 对于web服务器来说，图片是最消耗资源的，于是我们有必要把图片与页面进行分离，我们把图片放到独立的图片        服务器。这样的架构可以降低提供页面访问请求的服务器系统压力，并且可以保证系统不会因为图片的问题而崩                       溃。在图片服务器上，我们可以对不同的配置进行优

 4. 缓存
     - 具体接触过的缓存机制是hibernate的缓存机制。为了避免每次都向数据库中取得数据，我们把用户常常访问到的数据放到内存中，甚至缓存十分大的时候我们可以把内存中的缓存放到硬盘中。还有高级的分布式缓存数据库使用，都可以增加系统的抗压力

 5. 分批传送

     - 在做某项目的时候，一次传递的参数太多，而且数据库规定一次最多传递的参数最多是三万条，当时有五万条记录，那怎么传送呢？最终是分批传送，电梯里一次乘不下那么多的人，会报超重的bug，那就分批把人送上去,还有一次在考试系统中，如果那么多的考试人员同时提交到数据库中，数据库的压力增大，有时会被down掉，当时采用的方法是使用ajax异步传输，没有等待考生点击提交按钮的时候，就把考生的答案自动提交，这样也避免了突然断电考生前面做过的题出现丢失的现象

 6. 数据库集群

     - 当面对复杂的应用，用户大量访问的时候，一台数据很快无法满足需求，于是我们需要使用数据库集群或者库表散列。我们在应用程序中安装业务和应用或者功能模块将数据进行分离，不同的模块对应不同的数据库或表，再按照一定的策略对某个页面或者功能进行更小的数据库散列

 7. DB优化

     - 在数据库设计的时候就要考虑到后期的维护，数据库三范式是我们设计数据库索要遵循的原则

```

 > 数据库三范式

 > 第一范式：强调的是列的原子性

 > 第二范式： 首先是 1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分

 > 第三范式： 首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖

```
 - 索引的建立：建立索引要适当，如果一个表经常用来被查询，对于增加和修改很少被用到，我们就可以为这个表建立索引，因为对于增加和修改和删除操作时，我们对索引的维护要大大超过索引给我们带来的效率


 数据库建立索引的优缺点

 优点

```
 > * 通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性

 > * 可以大大加快数据的检索速度，这也是创建索引的最主要的原因

 > * 可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义

 > * 在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间- 表字段的类型选择要恰当

 > * 通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能

```

 **缺点**

```
 > * 创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加

 > * 索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大
 > * 当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度
 > **适合建立索引的列 **
 > * 在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构
 > * 在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度
 > * 在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的
 > * 在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间
 > * 在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度
 > **不适合建立索引的列 **
 > * 对于那些在查询中很少使用或者参考的列不应该创建索引
 > * 对于那些只有很少数据值的列也不应该增加索引
 > * 对于那些定义为text, image和bit数据类型的列不应该增加索引

```
 - 外键要慎用，因为主键代表这一张表，而外键代表一群表，对表之间进行了关联，在删除修改等需要我们关联
 - 在数据库操作上尽量使用prepareStatement，少用Statement，因为**PrepareStatement**是进行预编译的。connection设置为readOnly，Connection是对书库连接，属于重量级，我们使用即可。连接池的使用，我们可以修改数据库默认的连接数


##### 多线程

 1. 进程和线程之间有什么不同

     - 一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。Java运行环境是一个包含了不同的类和程序的单一进程。线程可以被称为轻量级进程。线程需要较少的资源来创建和驻留在进程中，并且可以共享进程中的资源

 2. 我们如何创建一个线程？

     - 有两种创建线程的方法：一是实现Runnable接口，然后将它传递给Thread的构造函数，创建一个Thread对象；二是直接继承Thread类

 3. 有哪些不同的线程生命周期

     - `new`: 新建

     - `runnable**`: 调用start()

     - `running`: 线程理想状态，cpu分配了时间给了线程

     - `blocked`: 阻塞：sleep(), wait() --> 阻塞　--> notify(), notifyAll() --> runnable

     - `dead`: 死亡

 4. 如何确保main()方法所在的线程是Java程序最后结束的线程

     - 我们可以使用Thread类的joint()方法来确保所有程序创建的线程在main()方法退出前结束

 5. 线程之间是如何通信的

     - 当线程间是可以共享资源时，线程间通信是协调它们的重要的手段。Object类中wait()\notify()\notifyAll()方法可以用于线程间通信关于资源的锁的状态

 6. 为什么线程通信的方法wait(), notify()和notifyAll()被定义在Object类里

     - Java的每个对象中都有一个锁(monitor，也可以成为监视器) 并且wait()，notify()等方法用于等待对象的锁或者通知其他线程对象的监视器可用。在Java的线程中并没有可供任何对象使用的锁和同步器。这就是为什么这些方法是Object类的一部分，这样Java的每一个类都有用于线程间通信的基本方法

 7. 为什么Thread类的sleep()和yield()方法是静态的？

     - Thread类的sleep()和yield()方法将在当前正在执行的线程上运行。所以在其他处于等待状态的线程上调用这些方法是没有意义的。这就是为什么这些方法是静态的。它们可以在当前正在执行的线程中工作，并避免程序员错误的认为可以在其他非运行线程调用这些方法。

 8. volatile关键字在Java中有什么作用

     - 当我们使用volatile关键字去修饰变量的时候，所以线程都会直接读取该变量并且不缓存它。这就确保了线程读取到的变量是同内存中是一致的

 9. 什么是ThreadLocal

     - ThreadLocal用于创建线程的本地变量，我们知道一个对象的所有线程会共享它的全局变量，所以这些变量不是线程安全的，我们可以使用同步技术。但是当我们不想使用同步的时候，我们可以选择ThreadLocal变量。每个线程都会拥有他们自己的Thread变量，它们可以使用get()\set()方法去获取他们的默认值或者在线程内部改变他们的值。ThreadLocal实例通常是希望它们同线程状态关联起来是private static属性


 10. 什么是死锁(Deadlock)？如何分析和避免死锁

     - 死锁是指两个以上的线程永远阻塞的情况，这种情况产生至少需要两个以上的线程和两个以上的资源。分析死锁，我们需要查看Java应用程序的线程转储。我们需要找出那些状态为BLOCKED的线程和他们等待的资源。每个资源都有一个唯一的id，用这个id我们可以找出哪些线程已经拥有了它的对象锁。避免嵌套锁，只在需要的地方使用锁和避免无限期等待是避免死锁的通常办法


 11. 什么是线程池？如何创建一个Java线程池？

     - 一个线程池管理了一组工作线程，同时它还包括了一个用于放置等待执行的任务的队列。java.util.concurrent.Executors提供了一个 java.util.concurrent.Executor接口的实现用于创建线程池

##### **锁**

###### 在多线程下，一个非常重要的问题就是同步,关于同步，一般会有以下解决方法

 - 在需要同步的方法的方法签名中加入synchronized关键字。

 - 使用synchronized块对需要进行同步的代码段进行同步

 - 使用JDK 5中提供的java.util.concurrent.lock包中的Lock对象

 * java内置锁

     - 每个java对象都可以用做一个实现同步的锁，这些锁成为内置锁。线程进入同步代码块或方法的时候会自动获得该锁，在退出同步代码块或方法时会释放该锁。获得内置锁的唯一途径就是进入这个锁的保护的同步代码块或方法。

     - java内置锁是一个互斥锁，这就是意味着最多只有一个线程能够获得该锁，当线程A尝试去获得线程B持有的内置锁时，线程A必须等待或者阻塞，知道线程B释放这个锁，如果B线程不释放这个锁，那么A线程将永远等待下去

     - java的对象锁和类锁在锁的概念上基本上和内置锁是一致的，但是，两个锁实际是有很大的区别的，对象锁是用于对象实例方法，或者一个对象实例上的，类锁是用于类的静态方法或者一个类的class对象上的。我们知道，类的对象实例可以有很多个，但是每个类只有一个class对象，所以不同对象实例的对象锁是互不干扰的，但是每个类只有一个类锁

     - 但是有一点必须注意的是，其实类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的



#####  **设计模式**

###### 列举几个常用的设计模式

 1. 单例模式

    - 单例模式有以下特点：

    ```
     > 单例类只能有一个实例。
     > 单例类必须自己创建自己的唯一实例。
     > 单例类必须给所有其他对象提供这一实例。

    ```

    - 单利模式类型

    ```
     > 懒汉模式：　第一次调用的时候初始化实例（线程不安全，需要加同步）

     > 饿汉模式：　项目加载的时候初始化实例，　自始至终只有一个实例（天生线程安全）

    ```


 2. 工厂模式

     - **工厂模式的两种情况**

    ```
         > 在编码时不能预见需要创建哪种类的实例

         > 系统不应依赖于产品类实例如何被创建、组合和表达的细节
    ```

 3. 代理模式


     * 静态代理　

            > 聚合实现方式中代理类聚合了被代理类，且代理类及被代理类都实现了同一个接口，可实现灵活多变。继承式的实现方式则不够灵活

     * 动态代理

            > 一般来说，对代理模式而言，一个主题类与一个代理类一一对应，这也是静态代理模式的特点。

 但是，也存在这样的情况，有n各主题类，但是代理类中的“前处理、后处理”都是一样的，仅调用主题不同。也就是说，多个主题类对应一个代理类，共享“前处理，后处理”功能，动态调用所需主题，大大减小了程序规模，这就是动态代理模式的特点



 - JDK动态代理步骤

         > 创建一个实现InvocationHandler接口的类，它必须实现invoke()方法

         > 创建被代理的类及接口

         > 调用Proxy的静态方法，创建一个代理类

         > 通过代理调用方法

##### 框架

###### Mybatis



 1. 实现原理

     MyBatis应用程序根据`XML`配置文件创建`SqlSessionFactory`，`SqlSessionFactory`在根据配置，配置来源于两个地方，一处是配置文件，一处是Java代码的注解，获取一个`SqlSession`。`SqlSession`包含了执行sql所需要的所有方法，可以通过`SqlSession`实例直接运行映射的sql语句，完成对数据的增删改查和事务提交等，用完之后关闭`SqlSession`

 2. 优点

     - 简单易学

     - 灵活

     - 解除sql与程序代码的耦合

     - 提供映射标签，支持对象与数据库的orm字段关系映射(orm)

     - 提供对象关系映射标签，支持对象关系组建维护(orm)

     - 提供xml标签，支持编写动态sql


 3. 缺点

     - 编写SQL语句时工作量很大，尤其是字段多、关联表多时，更是如

     - SQL语句依赖于数据库，导致数据库移植性差，不能更换数据库

     - 框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改

     - 二级缓存机制不佳

 4. 总结

     - **专注sql本身，程序员需要自己写sql语句，sql的修改与优化比较方便。它是一个不完全的ORM框架，虽然程序员自己写sql，但它自身也可以实现映射**

     - **适用与中小型项目**

     MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由`apache software foundation` 迁移到了google code，并且改名为MyBatis 。iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Object(DAO)


 **问题**：

 1. MyBatis编程步骤是什么样的

     - 创建**SqlSessionFactory**

     - 通过SqlSessionFactory创建**SqlSession**

     - 通过**sqlsession**执行数据库操作

     - 调用session.commit()提交事务

     - 调用session.close()关闭会话

 2. 使用MyBatis的mapper接口调用时有哪些要求

     - Mapper接口方法名和mapper.xml中定义的每个sql的id相同

     - Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同

     - Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同

     - Mapper.xml文件中的namespace即是mapper接口的类路径



 3. 简单的说一下MyBatis的一级缓存和二级缓存

     - Mybatis首先去缓存中查询结果集，如果没有则查询数据库，如果有则从缓存取出返回结果集就不走数据库。Mybatis内部存储缓存使用一个`HashMap`，key为`hashCode+sqlId+Sql`语句。value为从查询出来映射生成的java对象

     - Mybatis的二级缓存即查询缓存，它的作用域是一个mapper的`namespace`，即在同一个namespace中查询sql可以从缓存中获取数据。二级缓存是可以跨`SqlSession`的。

###### SpringMVC

 1. 工作流程

     - 用户发送请求至前端控制器DispatcherServlet

     - DispatcherServlet收到请求调用HandlerMapping处理器映射器

     - 处理器映射器找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet

     - `DispatcherServlet`调用`HandlerAdapter`处理器适配器

     - HandlerAdapter经过适配调用具体的`处理器`(Controller，也叫后端控制器)

     - Controller执行完成返回`ModelAndView`

     - HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet

     - DispatcherServlet将ModelAndView传给`ViewReslover`视图解析器

     - ViewReslover解析后返回具体`View`

     - DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）

     - DispatcherServlet响应用户

 2. DispatcherServlet

     - Spring的MVC框架是围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。DispatcherServlet主要用作职责调度工作，本身主要用于控制流程，主要职责如下：

         - 文件上传解析，如果请求类型是multipart将通过`MultipartResolver`进行文件上传解析；

         - 通过`HandlerMapping`，将请求映射到`处理器`（返回一个`HandlerExecutionChain`，它包括一个处理器、多个HandlerInterceptor拦截器）

         - 通过`HandlerAdapter`支持多种类型的处理器(HandlerExecutionChain中的处理器)

         - 通过`ViewResolver`解析逻辑视图名到具体视图实现；

         - 本地化解析

         - 渲染具体的视图等
